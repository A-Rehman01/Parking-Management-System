=============================================== Parking Scehema ==============================
Parking Area Schema
{
	owner:{},      //admin
	parkingID: {},
	name:  {},
	capacity:{}    //20
	availabilty:{} // 20	
	accoupied:{} // 0
	users:[usersScehema]
	createdAt:{}   // time of parking slot created

}


userScehma
{
	name:{}
	authID:{} 
	starteTime:{}
	endTime:{}
	status:{}
	carnumber:{}
	slots:{}
	
}

ParkingAPIhit =======? status pending/Approved/cancel
isExpired =============? 



	[
		owner: "0000000000000003333",
		parkingID: 00000000123,
		name:  "DeluxParking",
		capacity: 20    
		availabilty: 20	 -2 =18
		accoupied: 0   +2
		users:{	
			[
				name:"AR"
				authID:"0000000001" 
				startedate: 12/4/2021 : 1:07
				endDate: 13/4/2021 : 1:07
				status:  pending/active/canceled
				carnumber:2233,
				slote:2,
				isExpired:  true/false, ==========> AfterSearch 1) deletekrdo 2)cron node/job
			
			],
			[
				name:"AS"
				authID:"00000000201" 
				startedate: 12/4/2021 : 1:07
				endDate: 13/4/2021 : 1:07
				status:  pending/active/canceled
				carnumber:A333,
				slote:4,
				isExpired:  true/false, ==========> AfterSearch 1) deletekrdo 2)cron node/job
			
			],
			[],
			[],
			[],
			[],
			[],
			[],
			[],
			[],
			[],
		}
		createdAt: 11/4/3 12:51
	]


======================================== APIS  ==========================================
                             =========AdminsAPIs=========
1) create parking Area    /api/admin/parkings    POST   Private/admin

			body.params {
			capacity,user:[],parkingname
				}
2) List of Parkings  /api/admin/parkings    GET   Private/admin
(List of parking req)

3)approved parking slot api /api/admin/parkings/parking:id/request data= {status:true/false} (  /api/admin/parkings    POST   Private/admin )  if available,and 3times =>  updtae Status and calulate occupied


 =========USersAPIs=========
1) book Parking Slots   /api/user/parkings    POST   Private  data = slot,start,end 



availabilty:{    ============ virtual
	type:Number,
	required :true,
	value:capacity-accoupied,
	
}

accoupied:{
	type:Number,
	required :true,
	default:capacity,
	
}

2) get my parkings /api/user/parking GET private 



















